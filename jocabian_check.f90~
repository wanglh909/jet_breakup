

subroutine check
  use kind
  use data

  implicit none

  integer(kind=ik):: jj, qq, k, l, x, y

  real(kind=rk):: integrandRsi_V(3,3), integrandReta_V(3,3), integrandRu_V(3,3), integrandRv_V(3,3), integrandRp(3,3)
  real(kind=rk):: integrandRsi_S(3), integrandReta_S(3), integrandRu_S(3), integrandRv_S(3)

  real(kind=rk):: sf_check(9,5), sj_check(9,9,5,5), check_matr(40,40)




  do jj = 1, 9, 1                 !j
     do qq = 1, 5, 1                       !q

        if ( ( (jj.eq.2) .or. (jj.eq.4) .or. (jj.eq.5) .or. (jj.eq.6) .or. (jj.eq.8) ) .and. ( qq .eq. 5 ) ) cycle

        y = NOPP( globalNM(m,jj) ) + qq-1

        sol(y) = sol(y) + TOL

        if (timestep.le.5) then
           soldot(y) = ( sol(y) - solp(y) )/dt
        else
           soldot(y) = 2.0_rk*( sol(y) - solp(y) )/dt - soldotp(y)
        end if


        call values_in_an_element



        do i = 1, 9, 1            !i is the i in the residual Res(i)
           !i = 3

           do k = 1, 3, 1
              do l = 1, 3, 1

                 !Aterm(k,l,i)
                 Aterm(k,l) = ( zeta(k,l)**2 + reta(k,l)**2 )*phisi(k,l,i) - &
                      ( zeta(k,l)*zsi(k,l) + reta(k,l)*rsi(k,l) )*phieta(k,l,i)
                 Bterm(k,l) = -( zsi(k,l)*zeta(k,l) + rsi(k,l)*reta(k,l) )*phisi(k,l,i) &
                      + ( zsi(k,l)**2 + rsi(k,l)**2 )*phieta(k,l,i)

                 integrandRsi_V(k,l) = ( s_orth(k,l) + epss )*Aterm(k,l)/Jp(k,l) - &
                      eps1*phisi(k,l,i)*f_size( gausspoint(k) )*log( rsi(k,l)**2 + zsi(k,l)**2 )

                 integrandReta_V(k,l) = ( 1.0_rk/s_orth(k,l) + epss )*Bterm(k,l)/Jp(k,l) - &
                      eps2*phieta(k,l,i)*g_size( gausspoint(l) )*log( reta(k,l)**2 + zeta(k,l)**2 )


                 integrandRu_V(k,l) = ( phi(k,l,i)*( udotintfac(k,l) + ( uintfac(k,l) - rdotintfac(k,l) )*urintfac(k,l) +  &
                      ( vintfac(k,l) - zdotintfac(k,l) )*uzintfac(k,l) )  - &
                      Kdi*pintfac(k,l)*Oh*( phir(k,l,i) + phi(k,l,i)/rintfac(k,l) ) + &
                      Oh*( 2.0_rk*urintfac(k,l)*phir(k,l,i) + ( uzintfac(k,l) + vrintfac(k,l) )*phiz(k,l,i) + &
                      phi(k,l,i)*2.0_rk/rintfac(k,l)**2 *uintfac(k,l) ) )  *rintfac(k,l)*abs(Jp(k,l))

                 integrandRv_V(k,l) = ( phi(k,l,i)*( vdotintfac(k,l) + ( uintfac(k,l) - rdotintfac(k,l) )*vrintfac(k,l) + &
                      ( vintfac(k,l) - zdotintfac(k,l) )*vzintfac(k,l) + Grav ) - Kdi*pintfac(k,l)*Oh*phiz(k,l,i) + &
                      Oh*( ( uzintfac(k,l) + vrintfac(k,l) ) *phir(k,l,i) + 2.0_rk*vzintfac(k,l)*phiz(k,l,i) ) ) &
                      *rintfac(k,l)*abs(Jp(k,l))

                 integrandRp(k,l) = psi(k,l,i)* ( urintfac(k,l) + uintfac(k,l)/rintfac(k,l) + vzintfac(k,l) ) &
                      *rintfac(k,l)*abs(Jp(k,l))
              end do
           end do


           sf_check(i,NNr) = gaussian_quadrature(integrandRsi_V)
           sf_check(i,NNz) = gaussian_quadrature(integrandReta_V)
           sf_check(i,NNu) = gaussian_quadrature(integrandRu_V)
           sf_check(i,NNv) = gaussian_quadrature(integrandRv_V)
           sf_check(i,NNp) = gaussian_quadrature(integrandRp)    !sf_check( (2,4,5,6,8) ,5) = 0.0_rk


           !*******************************************adding SI to sf_check********************************************************

           if( (rowNM(m).eq.1) .and. ( (i.eq.1) .or. (i.eq.2) .or. (i.eq.3) ) )  then
              do k = 1, 3, 1    !three gausspoints
                 ipp = i  !phix_1d(k,ipp)
                 integrandRsi_S(k) = phix_1d(k,ipp) * f_size( gausspoint(k) ) * log( rsi_down(k)**2 + zsi_down(k)**2 )
              end do
              sf_check(i,NNr) = sf_check(i,NNr)  -  M1*gaussian_quadrature_1d(integrandRsi_S)
           end if

           if( (rowNM(m).eq.NEY) .and. ( (i.eq.7) .or. (i.eq.8) .or. (i.eq.9) ) )  then
              do k = 1, 3, 1    !three gausspoints
                 ipp = i - 6  !phix_1d(k,ipp)
                 integrandRsi_S(k) = phix_1d(k,ipp) * f_size( gausspoint(k) ) * log( rsi_up(k)**2 + zsi_up(k)**2 )
              end do
              sf_check(i,NNr) = sf_check(i,NNr)  -  M1*gaussian_quadrature_1d(integrandRsi_S)
           end if

           if( (columnNM(m).eq.1) .and. ( (i.eq.1) .or. (i.eq.4) .or. (i.eq.7) ) )  then
              do k = 1, 3, 1    !three gausspoints
                 ipp = i/3 + 1  !phix_1d(k,ipp)
                 integrandReta_S(k) = phix_1d(k,ipp) * g_size( gausspoint(k) ) * log( reta_left(k)**2 + zeta_left(k)**2 )
              end do
              sf_check(i,NNz) = sf_check(i,NNz)  -  M2*gaussian_quadrature_1d(integrandReta_S)
           end if

           if( (columnNM(m).eq.NEX) .and. ( (i.eq.3) .or. (i.eq.6) .or. (i.eq.9) ) )  then
              do k = 1, 3, 1    !three gausspoints
                 ipp = i/3  !phix_1d(k,ipp)
                 integrandReta_S(k) = phix_1d(k,ipp) * g_size( gausspoint(k) ) * log( reta_right(k)**2 + zeta_right(k)**2 )


                 integrandRsi_S(k) = phi_1d(k,ipp)*( -zeta_right(k)*( uintfac_right(k) - rdotintfac_right(k) ) + &
                      reta_right(k)*( vintfac_right(k) - zdotintfac_right(k) ) )*rintfac_right(k)

                 integrandRu_S(k) = ( reta_right(k)*phix_1d(k,ipp) / ( reta_right(k)**2 + zeta_right(k)**2 ) + &
                      phi_1d(k,ipp)/rintfac_right(k) )*rintfac_right(k)*( reta_right(k)**2 + zeta_right(k)**2 )**0.5_rk

                 integrandRv_S(k) = zeta_right(k)*phix_1d(k,ipp) / ( reta_right(k)**2 + zeta_right(k)**2 )**0.5_rk &
                      *rintfac_right(k)

              end do
              sf_check(i,NNz) = sf_check(i,NNz)  -  M2*gaussian_quadrature_1d(integrandReta_S)

              sf_check(i,NNr) = gaussian_quadrature_1d(integrandRsi_S)          !directly replace Rsi_V with Rsi_S, viz KBC
              sf_check(i,NNu) = sf_check(i,NNu)  + gaussian_quadrature_1d(integrandRu_S)
              sf_check(i,NNv) = sf_check(i,NNv)  + gaussian_quadrature_1d(integrandRv_S)
           end if



           do p = 1, 5, 1
              !p = 1


              if ( ( (i.eq.2) .or. (i.eq.4) .or. (i.eq.5) .or. (i.eq.6) .or. (i.eq.8) ) .and. ( p .eq. 5 ) ) cycle

              sj_check(i,jj,p,qq) = ( sf_check(i,p) - sf(i,p) )/TOL
              check_matr( LNOPP(i)+p-1, LNOPP(jj)+qq-1 ) = sj_check(i,jj,p,qq) - sj(i,jj,p,qq)

              if( abs( sj_check(i,jj,p,qq) - sj(i,jj,p,qq) ) .gt. 0.5e-3_rk ) then
                 ! write(*,*) 'error in Jac', ',p=', p, ',qq=', qq

                 write(*,*) 'sj_check=', sj_check(i,jj,p,qq), 'sj=', sj(i,jj,p,qq)
                 write(*,*) 'sf_check=' , sf_check(i,p), 'sf =', sf(i,p)
                 write(*,*) time, m,i,jj,p,qq
                 !pause
              end if

              ! if(m.eq.2.and.i.eq.9.and.p.eq.1.and.jj.eq.9.and.qq.eq.5) then
              !    write(*,*) 'sj_check=', sj_check(i,jj,p,qq), 'sj=', sj(i,jj,p,qq)
              !    write(*,*) 'sf_check=' , sf_check(i,p), 'sf =', sf(i,p)
              !    pause
              ! end if




           end do        !end loop for p


        end do       !end loop for i, R(r,z)i 



        y = NOPP( globalNM(m,jj) ) + qq-1
        sol(y) = sol(y) - TOL
        if (timestep.le.5) then
           soldot(y) = ( sol(y) - solp(y) )/dt
        else
           soldot(y) = 2.0_rk*( sol(y) - solp(y) )/dt - soldotp(y)
        end if






     end do !end loop for qq
  end do              !end loop for jj







  ! open(unit = 10, file = 'check_matr.dat', status = 'replace' )
  !   do i = 1, 40, 1
  !     do jj = 1, 40, 1
  !         write( 10, '(40es14.7)', advance = 'no' ) check_matr(i,jj)
  !      end do
  !      write(10, '(A)') 
  !   end do
  !   close(10)
  ! write(*,*) 'done'


end subroutine check

